<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Haymarket Hustle - A DN Game</title>
    <script src="https://cdn.tailwindcss.com"></script>
    <style>
        @import url('https://fonts.googleapis.com/css2?family=Inter:wght@400;700&family=Bungee&display=swap');

        body {
            font-family: 'Inter', sans-serif;
            background-color: #f0f2f5;
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: 100vh;
            margin: 0;
            overflow: hidden;
        }

        .game-wrapper {
            background: #ffffff;
            border: 8px solid #cc0000; /* UNL Red Border */
            border-radius: 20px;
            box-shadow: 0 15px 30px rgba(0, 0, 0, 0.2);
            padding: 10px;
            display: flex;
            flex-direction: column;
            max-width: 95vw;
            width: 500px;
        }

        #gameCanvas {
            background-color: #333333; /* Dark street/market background */
            display: block;
            border-radius: 12px;
            touch-action: none; /* Prevent scrolling on touch */
        }

        .game-ui {
            font-family: 'Bungee', cursive;
            color: #cc0000;
            display: flex;
            justify-content: space-between;
            align-items: center;
            padding: 10px 10px 0;
            user-select: none;
        }

        .game-controls {
            display: flex;
            justify-content: center;
            gap: 10px;
            padding: 10px 0;
        }
        
        .control-btn {
            background-color: #e5e5e5;
            color: #333;
            padding: 10px 20px;
            border-radius: 10px;
            font-weight: bold;
            font-size: 1.1rem;
            box-shadow: 0 4px #b8b8b8;
            transition: all 0.1s;
        }

        .control-btn:active {
            box-shadow: 0 1px #b8b8b8;
            transform: translateY(3px);
        }

        /* Modal Styling for Start/End screens */
        .game-modal {
            position: absolute;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-color: rgba(0, 0, 0, 0.7);
            display: flex;
            justify-content: center;
            align-items: center;
            z-index: 10;
        }
        .modal-content {
            background: white;
            padding: 30px;
            border-radius: 15px;
            text-align: center;
            box-shadow: 0 10px 20px rgba(0, 0, 0, 0.3);
            font-family: 'Inter', sans-serif;
            max-width: 80%;
        }
        .modal-content h2 {
            font-family: 'Bungee', cursive;
            font-size: 2rem;
            margin-bottom: 10px;
        }
        .start-btn, .restart-btn {
            background-color: #cc0000;
            color: white;
            padding: 12px 25px;
            border-radius: 8px;
            font-weight: bold;
            margin-top: 20px;
            transition: background-color 0.2s;
            box-shadow: 0 5px #990000;
        }
        .start-btn:hover, .restart-btn:hover {
            background-color: #a00000;
        }
        .start-btn:active, .restart-btn:active {
            box-shadow: 0 2px #990000;
            transform: translateY(3px);
        }

    </style>
</head>
<body>

    <div class="game-wrapper">
        <!-- Game UI -->
        <div class="game-ui">
            <div class="text-xl">SCORE: <span id="scoreDisplay">0</span></div>
            <div class="text-xl">HIGH: <span id="highScoreDisplay">0</span></div>
        </div>

        <!-- Canvas Container (for Modal overlay) -->
        <div id="canvas-container" class="relative">
            <canvas id="gameCanvas" width="500" height="600"></canvas>
            
            <!-- Game Over/Start Modal -->
            <div id="gameModal" class="game-modal">
                <div id="modalContent" class="modal-content">
                    <!-- Content injected by JS -->
                </div>
            </div>
        </div>

        <!-- Touch/Mobile Controls -->
        <div class="game-controls md:hidden">
            <button id="leftBtn" class="control-btn">◀️ LEFT</button>
            <button id="rightBtn" class="control-btn">RIGHT ▶️</button>
        </div>
    </div>


    <script>
        // Global variables for environment consistency (not used for data persistence here)
        const appId = typeof __app_id !== 'undefined' ? __app_id : 'default-app-id';

        // --- GAME CONFIGURATION (JSON Structure) ---
        // All game constants and assets are now defined in this JSON object for easy modification.
        const GAME_CONFIG_JSON = {
            "PLAYER_SIZE": 30,
            "INITIAL_SPEED": 2.5,
            "MAX_SPEED": 8,
            "ITEM_SIZE": 20,
            "MAX_ITEMS": 15,
            "RESPAWN_RATE": 100,
            "PLAYER_SPEED_PPS": 300,
            "HIGHSCORE_KEY": "haymarketHustleHighScore",
            "SPEED_INCREASE_INTERVAL": 50,
            "SPEED_INCREASE_AMOUNT": 0.5,
            "assetTypes": [
                { "type": "COLLECT", "value": 10, "color": "#008080", "shape": "SQUARE", "name": "Vintage Find" },
                { "type": "COLLECT", "value": 5, "color": "#FFD700", "shape": "CIRCLE", "name": "Bar Special" },
                { "type": "COLLECT", "value": 5, "color": "#FFFFFF", "shape": "TRIANGLE", "name": "25¢ Wing" },
                { "type": "OBSTACLE", "value": 0, "color": "#A9A9A9", "shape": "RECT", "name": "$10 Cover" },
                { "type": "OBSTACLE", "value": 0, "color": "#6A5ACD", "shape": "STAR", "name": "Final Exam" }
            ]
        };
        
        // Parse the JSON configuration object
        const config = GAME_CONFIG_JSON; // In a real app, this would be JSON.parse(response) from a fetch

        // --- Canvas and Context Setup ---
        const canvas = document.getElementById('gameCanvas');
        const ctx = canvas.getContext('2d');
        const scoreDisplay = document.getElementById('scoreDisplay');
        const highScoreDisplay = document.getElementById('highScoreDisplay');
        const gameModal = document.getElementById('gameModal');
        const modalContent = document.getElementById('modalContent');
        const leftBtn = document.getElementById('leftBtn');
        const rightBtn = document.getElementById('rightBtn');

        // --- Game State ---
        let gameState = 'START'; // START, PLAYING, GAME_OVER
        let score = 0;
        let speed = config.INITIAL_SPEED;
        let lastTime = 0;
        let itemCounter = 0;
        let player = {};
        let items = [];
        let highScore = localStorage.getItem(config.HIGHSCORE_KEY) || 0;
        highScoreDisplay.textContent = highScore;
        
        // --- Utility Functions ---

        /**
         * Resizes the canvas to maintain aspect ratio and fit the container.
         */
        function resizeCanvas() {
            const container = document.getElementById('canvas-container');
            const containerWidth = container.clientWidth;
            
            // Fixed aspect ratio (5:6)
            canvas.width = containerWidth;
            canvas.height = (containerWidth / 5) * 6;
            
            // Redraw everything if in GAME_OVER state to keep the modal centered correctly
            if (gameState === 'GAME_OVER' || gameState === 'START') {
                drawModal();
            }
        }

        /**
         * Clamps a value between a min and max.
         */
        function clamp(num, min, max) {
            return Math.min(Math.max(num, min), max);
        }
        
        /**
         * Draws the game element based on its shape.
         */
        function drawItem(item) {
            ctx.fillStyle = item.asset.color;
            ctx.beginPath();
            
            // ITEM_SIZE is now config.ITEM_SIZE
            const ITEM_SIZE = config.ITEM_SIZE; 
            
            switch (item.asset.shape) {
                case 'SQUARE':
                    ctx.fillRect(item.x, item.y, ITEM_SIZE, ITEM_SIZE);
                    break;
                case 'CIRCLE':
                    ctx.arc(item.x + ITEM_SIZE / 2, item.y + ITEM_SIZE / 2, ITEM_SIZE / 2, 0, Math.PI * 2);
                    ctx.fill();
                    break;
                case 'TRIANGLE':
                    // Simple upward-pointing triangle
                    ctx.moveTo(item.x + ITEM_SIZE / 2, item.y);
                    ctx.lineTo(item.x + ITEM_SIZE, item.y + ITEM_SIZE);
                    ctx.lineTo(item.x, item.y + ITEM_SIZE);
                    ctx.closePath();
                    ctx.fill();
                    break;
                case 'RECT':
                    ctx.fillRect(item.x, item.y, ITEM_SIZE * 1.5, ITEM_SIZE / 2); // Wider, shorter obstacle
                    break;
                case 'STAR':
                    drawStar(item.x + ITEM_SIZE / 2, item.y + ITEM_SIZE / 2, 5, ITEM_SIZE / 2, ITEM_SIZE / 4);
                    break;
            }
            ctx.closePath();
            
            // Add a small text label for context
            ctx.fillStyle = '#FFFFFF';
            ctx.font = '8px Inter';
            ctx.textAlign = 'center';
            ctx.fillText(item.asset.name, item.x + ITEM_SIZE / 2, item.y + ITEM_SIZE + 10);
        }

        /**
         * Draws a five-pointed star.
         */
        function drawStar(cx, cy, spikes, outerRadius, innerRadius) {
            let rot = Math.PI / 2 * 3;
            let x = cx;
            let y = cy;
            let step = Math.PI / spikes;
            
            ctx.moveTo(cx, cy - outerRadius);
            for (let i = 0; i < spikes; i++) {
                x = cx + Math.cos(rot) * outerRadius;
                y = cy + Math.sin(rot) * outerRadius;
                ctx.lineTo(x, y);
                rot += step;

                x = cx + Math.cos(rot) * innerRadius;
                y = cy + Math.sin(rot) * innerRadius;
                ctx.lineTo(x, y);
                rot += step;
            }
            ctx.lineTo(cx, cy - outerRadius);
            ctx.fill();
        }

        // --- Game Logic ---

        /**
         * Sets up the initial state of the game.
         */
        function resetGame() {
            // Player size is now config.PLAYER_SIZE
            const PLAYER_SIZE = config.PLAYER_SIZE;
            
            score = 0;
            speed = config.INITIAL_SPEED;
            itemCounter = 0;
            items = [];
            player = {
                x: canvas.width / 2 - PLAYER_SIZE / 2,
                y: canvas.height - PLAYER_SIZE - 20,
                dx: 0, // Delta X for movement
                size: PLAYER_SIZE
            };
            scoreDisplay.textContent = score;
            highScore = localStorage.getItem(config.HIGHSCORE_KEY) || 0;
            highScoreDisplay.textContent = highScore;
        }

        /**
         * Starts the game loop.
         */
        window.startGame = function() {
            resetGame();
            gameState = 'PLAYING';
            gameModal.style.display = 'none';
            lastTime = performance.now();
            requestAnimationFrame(gameLoop);
        }

        /**
         * The main game loop for updating and drawing the game state.
         * @param {number} currentTime - Timestamp provided by requestAnimationFrame.
         */
        function gameLoop(currentTime) {
            if (gameState !== 'PLAYING') return;

            const deltaTime = (currentTime - lastTime) / 1000; // Delta time in seconds
            lastTime = currentTime;

            update(deltaTime);
            draw();

            requestAnimationFrame(gameLoop);
        }

        /**
         * Updates game state: player position, item positions, collisions.
         * @param {number} deltaTime
         */
        function update(deltaTime) {
            // 1. Update Player Position
            // Player speed is now config.PLAYER_SPEED_PPS
            const playerSpeed = config.PLAYER_SPEED_PPS; 
            player.x += player.dx * playerSpeed * deltaTime;

            // Boundary checks
            player.x = clamp(player.x, 0, canvas.width - player.size);

            // 2. Generate new items
            itemCounter++;
            // Speed calculation uses config values
            speed = config.INITIAL_SPEED + Math.floor(score / config.SPEED_INCREASE_INTERVAL) * config.SPEED_INCREASE_AMOUNT; 
            if (itemCounter > config.RESPAWN_RATE / speed && items.length < config.MAX_ITEMS) {
                spawnItem();
                itemCounter = 0;
            }

            // 3. Update Item Positions and Check Collisions
            // ITEM_SIZE is now config.ITEM_SIZE
            const ITEM_SIZE = config.ITEM_SIZE;
            
            for (let i = items.length - 1; i >= 0; i--) {
                const item = items[i];
                item.y += speed;

                // Check collision
                if (checkCollision(player, item, ITEM_SIZE)) {
                    if (item.asset.type === 'COLLECT') {
                        score += item.asset.value;
                        scoreDisplay.textContent = score;
                        items.splice(i, 1); // Remove collected item
                    } else if (item.asset.type === 'OBSTACLE') {
                        gameOver();
                        return;
                    }
                } 
                
                // Remove item if it goes off screen
                else if (item.y > canvas.height) {
                    items.splice(i, 1);
                }
            }
        }

        /**
         * Clears the canvas and draws all game elements.
         */
        function draw() {
            ctx.clearRect(0, 0, canvas.width, canvas.height);

            // Draw Items
            items.forEach(drawItem);

            // Draw Player (The Husker)
            ctx.fillStyle = '#CC0000'; // UNL Red
            ctx.fillRect(player.x, player.y, player.size, player.size);
            
            // Add a small "DN" logo to the player
            ctx.fillStyle = '#FFD700'; // Gold
            ctx.font = '16px Bungee';
            ctx.textAlign = 'center';
            ctx.fillText('DN', player.x + player.size / 2, player.y + player.size / 2 + 5);
        }

        /**
         * Checks for collision between the player and an item.
         */
        function checkCollision(p, i, itemSize) {
            // Simple AABB collision detection
            return p.x < i.x + itemSize &&
                   p.x + p.size > i.x &&
                   p.y < i.y + itemSize &&
                   p.y + p.size > i.y;
        }

        /**
         * Creates and adds a new item to the items array.
         */
        function spawnItem() {
            // Asset types loaded from config
            const asset = config.assetTypes[Math.floor(Math.random() * config.assetTypes.length)];
            // ITEM_SIZE is now config.ITEM_SIZE
            const ITEM_SIZE = config.ITEM_SIZE;
            
            const x = Math.random() * (canvas.width - ITEM_SIZE);
            const y = -ITEM_SIZE; // Start off screen
            
            items.push({ x, y, asset });
        }

        /**
         * Handles the Game Over state.
         */
        function gameOver() {
            gameState = 'GAME_OVER';
            
            // Update High Score using config key
            if (score > highScore) {
                highScore = score;
                localStorage.setItem(config.HIGHSCORE_KEY, highScore);
                highScoreDisplay.textContent = highScore;
            }

            drawModal();
        }
        
        /**
         * Renders the start or game over modal content.
         */
        function drawModal() {
            gameModal.style.display = 'flex';
            
            let html;
            if (gameState === 'START') {
                html = `
                    <h2>HAYMARKET HUSTLE</h2>
                    <p class="text-gray-600 mb-4">A Daily Nebraskan Game</p>
                    <p class="text-lg font-bold text-gray-800">Instructions:</p>
                    <p class="text-sm text-gray-700">Move the red DN box left and right to collect **Vintage Finds** and **Bar Specials** (good things) while dodging **High Costs** and **Exams** (bad things).</p>
                    <p class="text-sm font-bold mt-2">Use ARROW KEYS or A/D on desktop, or the buttons on mobile.</p>
                    <button onclick="startGame()" class="start-btn">START GAME</button>
                `;
            } else if (gameState === 'GAME_OVER') {
                const message = score > (highScore - 10) ? 'Amazing Job!' : 'Keep Hustling!';
                html = `
                    <h2 class="text-red-700">GAME OVER!</h2>
                    <p class="text-2xl font-bold mb-2">${message}</p>
                    <p class="text-xl text-gray-700">Your Score: <span class="text-red-600 font-extrabold">${score}</span></p>
                    <p class="text-md text-gray-500">High Score: ${highScore}</p>
                    <button onclick="startGame()" class="restart-btn">RESTART</button>
                `;
            }
            modalContent.innerHTML = html;
        }

        // --- Event Listeners for Movement ---

        function handleKeyDown(e) {
            if (gameState === 'PLAYING') {
                if (e.key === 'ArrowLeft' || e.key === 'a') {
                    player.dx = -1;
                } else if (e.key === 'ArrowRight' || e.key === 'd') {
                    player.dx = 1;
                }
            } else if (gameState !== 'PLAYING' && e.key === 'Enter') {
                startGame();
            }
        }

        function handleKeyUp(e) {
            if (gameState === 'PLAYING') {
                if (e.key === 'ArrowLeft' || e.key === 'a' || e.key === 'ArrowRight' || e.key === 'd') {
                    player.dx = 0;
                }
            }
        }

        // Keyboard listeners
        document.addEventListener('keydown', handleKeyDown);
        document.addEventListener('keyup', handleKeyUp);

        // Mobile button listeners
        leftBtn.addEventListener('touchstart', (e) => { e.preventDefault(); if (gameState === 'PLAYING') player.dx = -1; });
        leftBtn.addEventListener('touchend', (e) => { e.preventDefault(); if (gameState === 'PLAYING') player.dx = 0; });
        leftBtn.addEventListener('touchcancel', (e) => { e.preventDefault(); if (gameState === 'PLAYING') player.dx = 0; });

        rightBtn.addEventListener('touchstart', (e) => { e.preventDefault(); if (gameState === 'PLAYING') player.dx = 1; });
        rightBtn.addEventListener('touchend', (e) => { e.preventDefault(); if (gameState === 'PLAYING') player.dx = 0; });
        rightBtn.addEventListener('touchcancel', (e) => { e.preventDefault(); if (gameState === 'PLAYING') player.dx = 0; });

        // Window resize listener for responsiveness
        window.addEventListener('resize', resizeCanvas);


        // --- Initialization ---
        window.onload = function() {
            // 1. Initial setup
            resizeCanvas();
            // 2. Display start modal
            drawModal();
        }

    </script>
</body>
</html>
